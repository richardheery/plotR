scale_y_continuous(expand = c(0,0)) +
labs(title = title, x = xlab, y = ylab) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 16) ) +
if(rotate_x_tick_labels) {theme(axis.text.x = element_text(angle = 90, hjust = 1))}
return(scree_plot)
}
scree_plot(test)
scree_plot(test, rotate_x_tick_labels = F)
scree_plot(test, rotate_x_tick_labels = T)
screeplot(test)
scree_plot(test)
#'
#' @param pca A prcomp or princomp object
#' @param number_of_pcs Number of PCs to display in the plot. Default is 10 or the total number of PCs, whichever is smaller.
#' @param title Title for the plot. Default is "Percentage of Variance Explained by Top \code{number_of_pcs} PCs".
#' @param xlab Label for the x axis. Default is "PC".
#' @param ylab Label for the y axis. Default is "Percentage of Variance Explained".
#' @param rotate_x_axis_labels Whether to rotate the x labels by 90 degrees. Default is False
#' @param colour_palette Either of vector of colours with length equal to \code{number_of_pcs} or the name of a palette from RColorBrewer. Default is the "Oranges" palette.
#' @return A ggplot object
#' @export
scree_plot = function(pca, number_of_pcs = 10, title = NULL, xlab = NULL, ylab = NULL, rotate_x_tick_labels = F, colour_palette = "Oranges"){
# Check for errors
if(!class(pca) %in% c("prcomp", "princomp")){simpleError("pca should be an object of class prcomp or princomp")}
# Assign number_of_pcs to either 10 or the total number of PCs, whichever is smaller
number_of_pcs = min(10, ncol(pca$x))
# Create palette if a palette name given
if(length(colour_palette) == 1){
if(colour_palette %in% rownames(RColorBrewer::brewer.pal.info)){
colour_palette = suppressWarnings({rev(colorRampPalette(RColorBrewer::brewer.pal(12, colour_palette))(number_of_pcs))})
} else {
simpleError("If giving the name palette it should be one of the available palettes from RColorBrewer")
}
}
# Assign labels and title
if(is.null(xlab)) {xlab = "PC"}
if(is.null(ylab)) {ylab = "Percentage of Variance Explained"}
if(is.null(title)) {title = paste("Percentage of Variance Explained by Top", number_of_pcs, "PCs")}
# Create plot
pca_var = pca$sdev ^ 2 / sum(pca$sdev^2) * 100
scree_df = data.frame(variance = head(pca_var, number_of_pcs), pc = head(colnames(pca$x), number_of_pcs))
scree_df$pc = factor(scree_df$pc, levels = scree_df$pc)
scree_plot = ggplot(scree_df, aes(x = pc, y = variance)) +
geom_bar(stat="identity", fill = colour_palette) +
scale_y_continuous(expand = c(0,0)) +
labs(title = title, x = xlab, y = ylab) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24),
axis.title = element_text(size = 20), axis.text = element_text(size = 18)) +
if(rotate_x_tick_labels) {theme(axis.text.x = element_text(angle = 90, hjust = 1))}
return(scree_plot)
}
scree_plot(test)
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A numeric vector with the percentage of variation explained by each PC
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), colour_var = "black", labels = NULL, title = NULL, legend_title = NA, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = colour_var)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in") }
}
pca_ggplot(test)
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), colour_var = "black", labels = NULL, title = NULL, legend_title = NA, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = colour_var)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
pca_ggplot(test)
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), colour_var = "black", labels = NULL, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = colour_var)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
pca_ggplot(test)
mtcars
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), colour_var = "black", labels = mtcars$gear, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = colour_var)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), colour_var = "black", labels = NULL, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = colour_var)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
pca_ggplot(test, labels = mtcars$gear)
pca_ggplot(test, colour_var = mtcars$gear)
pca_ggplot(test, colour_var = as.factor(mtcars$gear))
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), colour_var = NULL, labels = NULL, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = colour_var)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
pca_ggplot(test, colour_var = as.factor(mtcars$gear))
pca_ggplot(test)
pca = test
data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = colour_var)
data.frame(X = pca$x[,1], Y = pca$x[,2], colour = NULL)
data.frame(X = pca$x[,1], Y = pca$x[,2], colour = NA)
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), colour_var = NA, labels = NULL, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = colour_var)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), colour_var = NA, labels = NULL, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = colour_var)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
pca_ggplot(test)
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), groups = NULL, labels = NULL, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
if(is.null(groups){groups = "black"})
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = groups)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), groups = NULL, labels = NULL, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
if(is.null(groups)){groups = "black"})
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = groups)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), groups = NULL, labels = NULL, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
if(is.null(groups)){groups = "black"})
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = groups)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), groups = NULL, labels = NULL, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
if(is.null(groups)){groups = "black"}
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colour = groups)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colour)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
pca_ggplot(test)
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), groups = NULL, labels = NULL, title = NULL, legend_title = NULL, alpha = 1,
save_image_path = NULL, width = 9, height = 9){
if(is.null(groups)){
colour_vec = "black"
} else {colour_vec = groups
}
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colours = colour_vec)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colours)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18)) +
if(is.null(groups)){theme(legend.position = "None")}
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
pca_ggplot(test)
pca_ggplot(test, groups = "black")
pca_ggplot(test, groups = as.factor(mtcars$carb))
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), groups = NULL, group_colours = NULL, labels = NULL,
title = NULL, legend_title = NULL, alpha = 1, save_image_path = NULL, width = 9, height = 9){
if(is.null(groups)){
colour_vec = "black"
} else {colour_vec = groups
}
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colours = colour_vec)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colours)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18)) +
if(is.null(groups)){theme(legend.position = "None")} +
if(!is.null(group_colours)){scale_color_manual(values = group_colours)}
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
pca_ggplot(test)
pca_ggplot(test, groups = mtcars$carb)
pca_ggplot(test, groups = as.factor(mtcars$carb))
pca_ggplot(test, groups = as.factor(mtcars$carb), group_colours = rev(colorRampPalette(RColorBrewer::brewer.pal(12, "Oranges")))(6))
rev(colorRampPalette(RColorBrewer::brewer.pal(12, "Oranges")))(6)
rev(colorRampPalette(RColorBrewer::brewer.pal(12, "Oranges"))(6))
pca_ggplot(test, groups = as.factor(mtcars$carb), group_colours = rev(colorRampPalette(RColorBrewer::brewer.pal(12, "Oranges"))(6)))
rev(colorRampPalette(RColorBrewer::brewer.pal(12, "Oranges"))(6))
#' @param labels An optional vector of labels for the observations.
#' @param title A title for the plot. Default is no title.
#' @param legend_title The title of the legend for the plot. Default is no title.
#' @param alpha Alpha value for the points
#' @param save_image_path An optional filepath where the image will be saved.
#' @param width If the image is saved, the width of the saved image. Default is 9 inches
#' @param height If the image is saved, the height of the saved image. Default is 9 inches
#' @return A ggplot object
#' @export
# Use ggplot to create PCA plot with first 2 PCs
pca_ggplot = function(pca, PCs = c(1, 2), groups = NULL, group_colours = NULL, labels = NULL,
title = NULL, legend_title = NULL, alpha = 1, save_image_path = NULL, width = 9, height = 9){
if(is.null(groups)){
colour_vec = "black"
} else {colour_vec = groups
}
pca_data = data.frame(X = pca$x[,PCs[1]], Y = pca$x[,PCs[2]], colours = colour_vec)
pca_var_per <- round(pca$sdev ^ 2 / sum(pca$sdev^2) * 100, 1)
pca_plot = ggplot(data = pca_data, aes(x = X, y = Y, label = labels, color = colours)) +
geom_point(alpha = alpha) +
{if(!is.null(labels)){geom_text()}} +
xlab(paste(colnames(pca$x)[PCs[1]], " - ", pca_var_per[PCs[1]], "%", sep="")) +
ylab(paste(colnames(pca$x)[PCs[2]], " - ", pca_var_per[PCs[2]], "%", sep="")) +
labs(colour = legend_title) +
theme_classic() +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 24), axis.text=element_text(size = 20),
axis.title=element_text(size = 18))
if(is.null(groups)){pca_plot = pca_plot + theme(legend.position = "None")}
if(!is.null(group_colours)){pca_plot = pca_plot + scale_color_manual(values = group_colours)}
if(!is.null(save_image_path)){ggsave(pca_plot, filename = save_title,  device = "jpeg", width = 9, height = 9, units = "in")}
return(pca_plot)
}
pca_ggplot(test, groups = as.factor(mtcars$carb), group_colours = rev(colorRampPalette(RColorBrewer::brewer.pal(12, "Oranges"))(6)))
document()
library(devtools)
document()
library(devtools)
document()
build()
